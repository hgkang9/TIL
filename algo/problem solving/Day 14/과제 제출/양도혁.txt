#1 트리 순회

v = int(input())
Data = list(map(int,input().split()))

tree = [0] * (100)
tree[1] = 1
v += 1
left = [0]*v
right = [0]*v
child = [0]*v
parent = [0]*v
level = [0]*v



def preorder(r):
    print(r)
    if left[r] > 0 :
        preorder(left[r])
    if right[r] > 0 :
        preorder(right[r])
def inorder(r) :
    if left[r] > 0 :
        inorder(left[r])
    print(r)
    if right[r] > 0 :
        inorder(right[r])
def postorder(r) :
    if left[r] > 0:
        postorder(left[r])
    if right[r] > 0 :
        postorder(right[r])
    print(r)



for i in range(0,len(Data),2) :
    if left[Data[i]] > 0 :
        right[Data[i]] = Data[i+1]
    else :
        left[Data[i]] = Data[i+1]
    child[Data[i]] += 1
    parent[Data[i+1]] = Data[i]
    level[Data[i+1]] = level[Data[i]] + 1
print(left)
print(right)
print(child)
print(parent)
print(level)
preorder(1)
print()
inorder(1)
print()
postorder(1)
# 13
# 1 2 1 3 2 4 3 5 3 6 4 7 5 8 5 9 6 10 6 11 7 12 11 13


#2 사칙연산
def check() :
    re = 1
    for i in range(n):
        Data = input().split()
        if Data[1] in chk :
            if len(Data) != 4 :
                re = 0
    return re
for tc in range(1,11) :
    n = int(input())
    chk = ['*','-','/','+']
    print('#{} {}'.format(tc,check()))


#3 중위순회
def inorder(r) :
    if r*2 <= n :
        inorder(r*2)
    print(tree[r],end='')
    if r*2+1 <= n :
        inorder(r*2+1)
for tc in range(1,11) :
    n = int(input())
    tree = ['']*(n+1)
    for i in range(n) :
        Data = input().split()
        tree[i+1] = Data[1]
    print('#{}'.format(tc),end='')
    inorder(1)
    print()

#4 이진힙
for tc in range(int(input())) :
    n = int(input())
    tree = [0] * (n+1)
    Data = list(map(int,input().split()))
    r = 1
    for i in range(n) :
        tree[r] = Data[i]
        k = r
        while k > 1 :
            if tree[k//2] > tree[k] :
                tree[k],tree[k//2] = tree[k//2],tree[k]
                k //= 2
            else :
                break
        r+=1
    r-=1
    result = 0
    while r > 1 :
        r //= 2
        result += tree[r]
    print('#{} {}'.format((tc+1),result))