1. 리모컨
from collections import deque


def check(n):
    i = 0
    queuelist = deque([0])
    while i != n:
        for s in range(len(queuelist)):
            k = queuelist.popleft()
            for j in range(10):
                if j in can:
                    queuelist.append(k * 10 + j)
        i += 1
    return queuelist


N = int(input())
M = int(input())
broken = []
t = len(str(N))
if M != 0:
    broken = list(map(int, input().split()))
can = []
l = len(str(N))
mins = abs(N-100)
for i in range(10):
    if i not in broken:
        can.append(i)
for i in range(l-1, l+2):
    if i != 0:
        nums = check(i)
        for j in nums:
            nows = abs(N-j) + i
            if mins > nows:
                mins = nows
print(mins)

2. 탈주범 검거
def cango(ls,x,y):
    shape=ls[x][y]
    if shape==1:
        position=[[x,y+1],[x,y-1],[x+1,y],[x-1,y]]
    elif shape==2:
        position=[[x+1,y],[x-1,y]]
    elif shape==3:
        position=[[x,y+1],[x,y-1]]
    elif shape==4:
        position=[[x-1,y],[x,y+1]]
    elif shape==5:
        position=[[x+1,y],[x,y+1]]
    elif shape==6:
        position=[[x+1,y],[x,y-1]]
    elif shape==7:
        position=[[x-1,y],[x,y-1]]
    return position
def checkline(ls,x1,y1,x2,y2):
    position=cango(ls,x2,y2)
    if [x1,y1] in position:
        return True
def bfs(idx,ls,x,y):
    global n,m,l,r,c
    check[x][y]=1
    if idx<l:
        position=cango(ls,x,y)
        for item in position:
            new_x=item[0]
            new_y=item[1]
            if new_x<n and new_y<m and new_x>=0 and new_y>=0:
                if ls[new_x][new_y] and checkline(ls,x,y,new_x,new_y):
                    item2 = ls[x][y]
                    ls[x][y] = 0
                    bfs(idx+1,ls,new_x,new_y)
                    ls[x][y] = item2

for t in range(int(input())):
    n,m,r,c,l=list(map(int,input().split()))
    maps=[]
    for line in range(n):
        maps.append(list(map(int,input().split())))
    check=[[0 for x in range(m)] for x in range(n)]
    bfs(1,maps,r,c)
    where=0
    for i in range(n):
        where+=check[i].count(1)
    print(f'#{t+1} {where}')

3. 장난감 조립
N = int(input())
M = int(input())
graph = [[0] * (N+1) for _ in range(N+1)]
p = [0] * (N+1)
for i in range(M):
    X, Y, K = map(int, input().split())
    graph[X][Y] = K
    p[Y] += 1
base = []
for i in range(1, N+1):
    if graph[i].count(0) == N + 1:
        base.append(i)
queuelist = [N]
dp = [[0] * (N+1) for _ in range(N+1)]
dp[N][N] = 1
while queuelist:
    for i in range(len(queuelist)):
        now = queuelist.pop(0)
        for j in range(N+1):
            if graph[now][j]:
                dp[j][now] = sum(dp[now]) * graph[now][j]
                queuelist.append(j)
for i in base:
    if dp[i]:
        print(i, sum(dp[i]))
