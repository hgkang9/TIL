1. 계산기3

stack = [0] * 10000
top = -1
post = []
isp = [-1] * 128
isp[ord('(')] = 0
isp[ord('+')] = 1
isp[ord('-')] = 1
isp[ord('*')] = 2
isp[ord('/')] = 2
icp = [-1] * 128
icp[ord('(')] = 3
icp[ord('+')] = 1
icp[ord('-')] = 1
icp[ord('*')] = 2
icp[ord('/')] = 2

def push(x):
    global top
    top += 1
    stack[top] = x
def calc(a, oper, b):
    if oper == '+':
        return a + b
    elif oper == '-':
        return a - b
    elif oper == '*':
        return a * b
    else:
        return a / b

def post_calc(postList):
    global top
    for i in range(len(postList)):
        # 피연산자 만나면 push
        if 48 <= ord(postList[i]) <= 57:
            top += 1
            stack[top] = postList[i]
        # 연산자 만나면 피연산자를 스택에서 2개 pop하고
        else:
            b = float(stack[top])
            top -= 1
            a = float(stack[top])
            top -= 1
            push(calc(a, postList[i], b))
    return int(stack[top])

for tc in range(1,11):
    t = int(input())
    Data = input()
    # get postfix notation
    for i in range(len(Data)):
        # 피연산자
        if 48 <= ord(Data[i]) <= 57:
            post.append(Data[i])
        # 연산자
        else:
            # ')' 오른쪽 괄호 만나면 '(' 만날때까지 pop하고 출력
            if Data[i] == ')':
                while stack[top] != '(':
                    post.append(stack[top])
                    top -= 1
                top -= 1 # '(' 만나면 pop
            else:
                if top == -1: # '('
                    push(Data[i])

                elif icp[ord(Data[i])] > isp[ord(stack[top])]:
                    push(Data[i])
                else:
                    while isp[ord(stack[top])] >= icp[ord(Data[i])] and top != -1:
                        post.append(stack[top])
                        top -= 1
                    push(Data[i])
    while top != -1:
        post.append(stack[top])
        top -= 1

    print(f'#{tc} {post_calc(post)}')
    top = -1\

2. forth

stack = [0] * 256
top = -1

def push(x):
    global top
    top += 1
    stack[top] = x

def IsOper(oper):
    if oper == '+' or oper == '-' or oper == '*' or oper == '/':
        return True
    else:
        return False

def MyIsDigit(string):
    for s in string:
        if ord(s) < 48 or ord(s) > 57:
            return False
    return True

def calc(a, oper, b):
    if oper == '+':
        return a+b
    elif oper == '-':
        return a-b
    elif oper == '*':
        return a*b
    elif oper == '/':
        return int(a/b)
    else:
        print('잘못된 연산자 입력')

T = int(input())
for tc in range(1, T+1):
    Data = input().split()
    result = 0
    for i in range(len(Data)):
        # 숫자 입력
        if MyIsDigit(Data[i]):
            push(int(Data[i]))
        # 연산자 입력
        elif IsOper(Data[i]):
            b = stack[top]
            top -= 1
            a = stack[top]
            top -= 1
            # 피연산자 개수가 모자라서 연산 불가능 한 경우
            if top < -1:
                print(f'#{tc} error')
                break
            push(calc(a, Data[i], b))
        # '.' 입력
        elif Data[i] == '.':
            # 출력할 값이 연산자이거나 숫자만 들어와서 연산 불가능
            if IsOper(stack[top]) or top != 0:
                print(f'#{tc} error')
                break
            else:
                print(f'#{tc} {stack[top]}')
                break
        # 숫자, 연산자, '.' 제외한 입력들어와 연산 불가능
        else:
            print(f'#{tc} error')
            break
    top = -1

""" error case
1 3 + [ .
.
3 3 4 4 .
5 3 * + .
"""

3. Maze

import sys
sys.stdin=open('input.txt', 'r')

# 상하좌우


def IsPossible(newY, newX):
    if -1 < newY < n and -1 < newX < n and not visited[newY][newX] and maze[newY][newX] != 1:
        return True
    else: return False

def SerachPath(nowY, nowX):
    global result
    visited[nowY][nowX] = True

    if maze[nowY][nowX] == 3:
        result = 1
        return

    for dir in range(4):
        if result == 1:
            return 1
        if IsPossible(nowY+dy[dir], nowX+dx[dir]):
            newY = nowY + dy[dir]
            newX = nowX + dx[dir]
            SerachPath(newY, newX)

for tc in range(1,int(input())+1):
    n = int(input())
    maze = [list(map(int, input())) for _ in range(n)]
    visited = [[0 for _ in range(n)] for _ in range(n)]
    for y in range(n):
        for x in range(n):
            if maze[y][x] == 2:
                startY = y
                startX = x
    result = 0
    SerachPath(startY, startX)
    print(f'#{tc} {result}')

4. Day03 달팽이 snail

dy = [0, 1, 0, -1] # 우하좌상
dx = [1, 0, -1, 0]

Data = [[9, 20, 2, 18, 11], [19, 1, 25, 3, 21], [8, 24, 10, 17, 7], [15, 4, 16 , 5, 6], [12, 13, 22, 23, 14]]
snail = [[0 for _ in range(5)] for _ in range(5)]

def Min(Data):
    min_num = 12345
    index_y = index_x = 0
    for y in range(len(Data)):
        for x in range(len(Data[0])):
            if Data[y][x] < min_num:
                min_num = Data[y][x]
                index_y = y
                index_x = x
    Data[index_y][index_x] = 123456
    return min_num

def IsSafe(newy, newx):
    if 0 <= newy < 5 and 0 <= newx < 5 and snail[newy][newx] == 0:
        return True
    else: return False

newY = newX = 0
dir = 0

for i in range(5):
    for j in range(5):
        snail[newY][newX] = Min(Data)
        if not IsSafe(newY+dy[dir], newX+dx[dir]):
            dir = (dir+1)%4
        newY = newY+dy[dir]
        newX = newX+dx[dir]

for k in range(len(snail)):
    print(snail[k])





