[격자판]
# import sys
# sys.stdin=open("input.txt",'r')
from collections import deque
TC=int(input())
for tc in range(1,TC+1):    
    my_map=[]
    for i in range(0,4):
        line = list(map(int,input().split()))
        my_map.append(line)
    
    def is_safe(Y,X):
        if -1<Y<4 and -1<X<4:
            return True
        else:
            return False
    
    dy=[-1,0,1,0]
    dx=[0,1,0,-1]
    
    QUEUE=deque()
    
    dist_map={}
    for y in range(0,4):
        for x in range(0,4):
            QUEUE.append((y,x,str(my_map[y][x]),1))
    
    
    while(QUEUE):
        now=QUEUE.popleft()
        now_y=now[0]
        now_x=now[1]
        now_value=now[2]
        now_index=now[3]
    
        if now_index==7:
            dist_map.update({now_value:1})
        else:
            for dir in range(0,4):
                if is_safe(now_y+dy[dir],now_x+dx[dir]):
                    QUEUE.append( (now_y+dy[dir],now_x+dx[dir],now_value+str(my_map[now_y+dy[dir]][now_x+dx[dir]]),now_index+1) )
    
    print("#{} ".format(tc),end='')
    print(len(dist_map))
    
    
[올림픽]
# import sys
# sys.stdin=open("input.txt",'r')
TC=int(input())
for tc in range(1,TC+1):
    casting_vote={}
    
    NM=list(map(int,input().split()))
    N=NM[0]
    M=NM[1]
    
    A=list(map(int,input().split()))
    B=list(map(int,input().split()))
    
    for i in range(0,N):
        casting_vote.update({i:0})
    
    for i in range(0,M):
        for j in range(0,N):
            if A[j]<=B[i]:
                casting_vote[j]=casting_vote[j]+1
                break
    
    max_index=0
    max_value=0
    for i in range(0,N):
        if casting_vote[i]>max_value:
            max_index=i
            max_value=casting_vote[i]
    print("#{} ".format(tc),end='')
    print(max_index+1)

[양팔저울]
def factorial(X):
    if X == 1:
        return 1
    return X * factorial(X - 1)


TC = int(input())
for tc in range(1, TC + 1):
    N = int(input())
    mugae_chu = list(map(int, input().split()))

    index_fuel = [1] * N
    s=sum(mugae_chu)
    ans_count = 0


    def weighting(now_index, now_Left_weight, now_right_weight):
        global ans_count

        if (now_Left_weight<now_right_weight):
            return

        if now_index == N:
            ans_count = ans_count + 1
            return

        if s-now_Left_weight < now_Left_weight:
            ans_count = ans_count + (1<<(N-now_index)) * factorial(N-now_index)
            return

        for i in range(0, N):
            if index_fuel[i] > 0:
                index_fuel[i] = 0
                weighting(now_index + 1, now_Left_weight + mugae_chu[i], now_right_weight)
                weighting(now_index + 1, now_Left_weight, now_right_weight + mugae_chu[i])
                index_fuel[i] = 1


    weighting(0, 0, 0)
    print("#{} ".format(tc), end='')
    print(ans_count)
    
