1. 배열최소합

import sys

sys.stdin = open("4881.txt")

t = int(input())
ans = 987654321
data= []

def isok(now):
	temp = 0
	for i in range(1,now):
		if select[i] == select[now]:
			return False

		temp += data[i-1][select[i]-1]
		if temp > ans:
			return False

	return True

def dfs(now, end):
	global ans
	if now == end:
		temp = 0
		for i in range(1,end+1):
			temp += data[i-1][select[i]-1]
		if ans > temp:
			ans = temp
	else:
		for i in range(1,end+1):
			select[now+1] = i
			if isok(now+1):
				dfs(now+1,end)
			else:
				select[now+1] = 0
	select[now] = 0

for tc in range(1,t+1):
	n = int(input())
	ans = 987654321
	data = []

	for i in range(n):
		data.append(list(map(int,input().split())))

	for i in range(1,n+1):
		select = [0 for j in range(n+1)]
		select[1] = i
		dfs(1,n)

	print(f'#{tc} {ans}')

2. 토너먼트

import sys

sys.stdin = open("4880.txt")

t = int(input())

def fight(a,b):
	x = a[1]
	y = b[1]

	if x == y:
		return a
	elif y - x == 1:
		return b
	elif y - x == -1:
		return a
	elif y - x == 2:
		return a
	elif y - x == -2:
		return b


def tournament(now,start,end):
	if len(now) == 1:
		return now[0]
	else:
		# left
		temp_left = now[start:(start+end)//2+1]
		left_start = 0
		left_end = len(temp_left)-1

		a = tournament(temp_left,left_start,left_end)

		# right
		temp_right = now[(start+end)//2+1:end+1]
		right_start = 0
		right_end = len(temp_right) - 1

		b = tournament(temp_right,right_start,right_end)

	return fight(a,b)

for tc in range(1,t+1):
	n = int(input())

	card = list(map(int,input().split()))
	for i in range(0,len(card)):
		card[i] = (i+1,card[i])

	result = tournament(card,0,n-1)

	print(f'#{tc} {result[0]}')

3. 여자친구
import sys

sys.stdin = open("girl.txt")

result = 987654321

def dfs(now,end,now_cost):
	global result
	visited[now] = 1
	if now == end:
		if result > now_cost:
			result = now_cost
		return
	else:
		for v in range(1,end+1):
			if visited[v] == 0 and mymap[now][v] == 1 and now_cost < result:
				dfs(v,end,now_cost+cost[now][v])
				visited[v] = 0

n,m = map(int,input().split())


visited = [0 for i in range(n+1)]
cost = [[0 for i in range(n+1)] for i in range(n+1)]
mymap = [[0 for i in range(n+1)] for i in range(n+1)]

for i in range(m):
	y,x,temp_cost = map(int,input().split())
	mymap[y][x] = 1
	mymap[x][y] = 1
	cost[y][x] = temp_cost
	cost[x][y] = temp_cost


dfs(1,7,0)

print(result)

4. 부분집합
import sys

sys.stdin = open("powerset.txt")

result = []

def powerset(now,llist,now_sum,end,now_list=None):
	if now_list is None:
		now_list = []

	if now_sum == end:
		result.append(now_list)
	elif now < 10 :
		# 현재값 선택
		temp = now_list + [llist[now]]
		powerset(now+1,llist,now_sum+llist[now],end,temp)
		# 현재값 선택 X
		powerset(now+1,llist,now_sum,end,now_list)



data = list(map(int,input().split()))

powerset(0,data,0,10)

print(result)

5. 마그네틱
import sys

sys.stdin = open("1220.txt")

for tc in range(1, 11):
	n = input()
	t_list = []
	llist = [[0] * 100 for i in range(100)]
	cnt = 0
	for i in range(100):
		t_list.append(input().split())

	for i in range(100):
		for j in range(100):
			if t_list[j][i] != '0':
				llist[i][j] = t_list[j][i]
			else:
				llist[i][j] = ''

	temp = []
	for i in range(100):
		temp.append(''.join(llist[i]))
	for i in range(100):
		strtemp = 0
		while temp[i].find('12', strtemp) >= 0:
			cnt += 1
			strtemp = temp[i].find('12', strtemp) + len('12')
	print(f'#{tc} {cnt}')
6. 최적경로
import sys

sys.stdin = open("1247.txt")

t= int(input())



def dfs(now,end,dis,cnt):
	global result,n
	if cnt == n:
		move = abs(now[0]-end[0]) + abs(now[1] - end[1])
		dis += move
		if result > dis:
			result = dis
	else:
		for p in range(1,len(point)):
			if visited[p] == 0 and dis < result:
				move = abs(now[0]-point[p][0]) + abs(now[1] - point[p][1])
				visited[p] = 1
				dfs(point[p],end,dis+move,cnt+1)
				visited[p] = 0



for tc in range(1,t+1):
	n = int(input())
	result = 987654321
	data = list(map(int,input().split()))
	visited = [0 for i in range(n+1)]
	point = [0]

	start = (data[0],data[1])
	end = (data[2],data[3])


	for i in range(4,len(data),2):
		point.append((data[i],data[i+1]))

	dfs(start,end,0,0)
	print(f'#{tc} {result}')






