1. 병합정렬
def merge(left, right):
	global cnt
	if left[-1] > right[-1]: cnt += 1
	left_len = len(left)
	right_len = len(right)
	result = [0]*(left_len+right_len)
	i = j = k =0
	while i < left_len and j < right_len:
		if left[i] < right[j]:
			result[k] = left[i]
			k+=1; i+=1
		else:
			result[k] = right[j]
			k+=1; j+=1
	while j < right_len:
		result[k] = right[j]
		k+=1; j+=1
	while i < left_len:
		result[k] = left[i]
		k+=1; i+=1
	return result

def mergeSort(A):
	if len(A) <= 1: return A
	mid = len(A)//2
	left = mergeSort(A[:mid])
	right = mergeSort(A[mid:])
	return merge(left, right)


for tc in range(1, int(input())+1):
	N = int(input())
	Data = list(map(int ,input().split()))
	cnt = 0
	Data = mergeSort(Data)
	#print(Data)
	print('#{} {} {}'.format(tc, cnt, Data[len(Data)//2]))

2. 이진탐색
def binarySerch(l, r, k, e):
	global cnt, f
	mid = (l+r)//2
	if A[mid] == k:
		if f == 1:
			cnt += 1
		return
	if l <= r:
		if A[mid] < k: # 오른쪽
			if e != 0 and e*-1 == 1: f = 0
			binarySerch(mid+1, r, k, -1)

		elif A[mid] > k:
			if e !=0 and e*1 == 1: f = 0
			binarySerch(l, mid-1, k, 1)

for tc in range(1, int(input())+1):
	N, M = map(int, input().split())
	A = list(map(int, input().split()))
	A.sort()
	B = list(map(int, input().split()))
	cnt = 0
	for key in B:
		f = 1
		binarySerch(0, len(A)-1, key, 0)
	print('#{} {}'.format(tc,cnt))

3. 전기버스2
def GetSome(now, cnt):
	global Min
	if now+ battery[now]>= N: # 종료조건
		if cnt < Min: Min = cnt
		return
	if cnt >= Min:return

	next = now + battery[now]
	for i in range(next, now, -1):
		if not visited[i]:
			visited[i] = 1
			GetSome(i, cnt+1)
			visited[i] = 0

for tc in range(1, int(input())+1):
	Data = list(map(int ,input().split()))
	N = Data[0]
	battery = [0]+ Data[1:]
	visited = [0]+[0]*N
	res = []
	Min = 987654321
	GetSome(1, 0)
	print('#{} {}'.format(tc, Min))

4. 최소생산비용
def GetSome(n, Sum):
	global Min
	if n==N:
		if Sum < Min: Min = Sum
		return
	if Sum >= Min: return
	for i in range(N):
		if not visited[i]:
			visited[i] = 1
			GetSome(n+1,Sum+Data[n][i])
			visited[i] = 0

for tc in range(1, int(input())+1):
	N = int(input())
	Data = [list(map(int ,input().split())) for _ in range(N)]
	visited = [0]*N
	Min=987654321
	GetSome(0, 0)
	print('#{} {}'.format(tc,Min))

5. 입국심사
def GetSome(mid):
	res = 0
	for k in range(N):
		res += mid//Data[k]
	return res
N, M = map(int, input().split())
Data = [0]*N
for i in range(N):
	Data[i] = int(input())
low = 0
high = max(Data)*M

while(low<=high):
	mid = (low + high) // 2
	cnt = GetSome(mid)
	if cnt < M: low = mid+1
	else: high = mid-1
print(low)