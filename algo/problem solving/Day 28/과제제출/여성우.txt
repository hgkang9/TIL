1. 병합 정렬
import sys
sys.stdin = open('input.txt', 'r')


def merge(ls):
    global cnt
    if len(ls) == 1:
        return ls
    tag = len(ls) // 2
    left = merge(ls[:tag])
    right = merge(ls[tag:])
    tag1 = len(left)
    tag2 = len(right)
    if left[-1] > right[-1]:
        cnt += 1
    i = j = 0
    merged = []
    while i < tag1 and j < tag2:
        if left[i] <= right[j]:
            merged.append(left[i])
            i += 1
        else:
            merged.append(right[j])
            j += 1
    if i < tag1:
        for _ in range(i, tag1):
            merged.append(left[_])
    if j < tag2:
        for _ in range(j, tag2):
            merged.append(right[_])
    return merged


for T in range(int(input())):
    N = int(input())
    ls = list(map(int, input().split()))
    print('#%d'%(T+1), end=' ')
    cnt = 0
    ls = merge(ls)
    print(ls[N//2], cnt)

2. 이진 탐색
import sys
sys.stdin = open('input.txt', 'r')


for T in range(int(input())):
    N, M = map(int, input().split())
    l1 = list(map(int, input().split()))
    l1.sort()
    l2 = list(map(int, input().split()))
    dp = [0] * M
    cnt = 0
    if T == 4:
        cnt = 0
    for i in range(M):
        l = 0
        r = N - 1
        while l <= r:
            m = (l + r) // 2
            if l1[m] < l2[i]:
                if dp[i] == -1:
                    break
                dp[i] = -1
                l = m + 1
            elif l1[m] > l2[i]:
                if dp[i] == 1:
                    break
                dp[i] = 1
                r = m - 1
            else:
                cnt += 1
                break
    print('#{} {}'.format((T+1), cnt))

3. 최소 비용
import sys
sys.stdin = open('input.txt', 'r')


def backtrack(ls, idx):
    global visited, mincost, nowcost
    if idx == N:
        if mincost > nowcost:
            mincost = nowcost
        return
    for i in range(N):
        if visited[i] == 0:
            visited[i] = 1
            nowcost += ls[idx][i]
            if nowcost < mincost:
                backtrack(ls, idx+1)
            nowcost -= ls[idx][i]
            visited[i] = 0



for T in range(int(input())):
    N = int(input())
    table = []
    for i in range(N):
        table.append(list(map(int, input().split())))
    mincost = 0
    visited = [0] * N
    for i in range(N):
        minnow = max(table[i]) + 1
        mintag = -1
        for j in range(N):
            if visited[j] == 0:
                if table[i][j] <= minnow:
                    minnow = table[i][j]
                    mintag = j
        visited[mintag] = 1
        mincost += minnow
    nowcost = 0
    visited = [0] * N
    backtrack(table, 0)
    print('#{} {}'.format(T+1, mincost))

4. 전기버스
for T in range(int(input())):
    ls = list(map(int, input().split()))
    N = ls[0]
    ls = ls[1:]
    now = 0
    cnt = 0
    next_range = range(now + 1, now + ls[now] + 1)
    while (N-1) not in next_range:
        cango = 0
        next_now = -1
        for i in next_range:
            if i > N - 1:
                break
            thisgo = i + ls[i]
            if thisgo > cango:
                cango = thisgo
                next_now = i
        now = next_now
        cnt += 1
        next_range = range(now + 1, now + ls[now] + 1)
    print('#{} {}'.format(T+1, cnt))

5. 입국심사
N, M = map(int, input().split())
line = [int(input()) for _ in range(N)]
line.sort()
re = line[0] * M
rs = line[0]
while rs <= re:
    m = (rs + re) // 2
    cnt = 0
    for i in range(N):
        cnt += m // line[i]
        if cnt >= M:
            re = m
            break
    else:
        rs = m
    if re - rs < 2:
        break
cnt = 0
for i in range(N):
    cnt += rs // line[i]
if cnt >= M:
    print(rs)
else:
    print(re)